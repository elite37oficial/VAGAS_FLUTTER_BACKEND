openapi: 3.0.0
info:
  description: "Vagas API"
  version: "1.0.0"
  title: "Documentação oficial da API do projeto VAGAS"
servers:
  - url: https://apivagasdev.elite37.com.br
    description: Remote server
  - url: http://localhost:8080
    description: Local server
tags:
- name: "jobs"
  description: "Access to Jobs"
- name: "login"
  description: "Get token from Authentication"
- name: "companies"
  description: "Access to Companies"
- name: "users"
  description: "Access to users"

paths:
  /jobs/id/{id}:
    get:
      tags:
      - "jobs"
      summary: "get job by id"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobEntity"
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
  /jobs:
    get:
      tags:
      - "jobs"
      parameters:
        - in: query
          name: city
          schema:
            type: string
            description: The city of a job that contains the value. Ex. São Paulo
        - in: query
          name: seniority
          schema:
            type: string
            description: The seniority requested by the job. Ex. junior
        - in: query
          name: company_id
          schema:
            type: string
            description: The Id of Company that offers the job.
        - in: query
          name: modality
          schema:
            type: string
            description: The modality of a job that contains the value. Ex. remoto, presencial
        - in: query
          name: regime
          schema:
            type: string
            description: The regime of a job that contains the value. Ex. PJ, CLT
      summary: "get all jobs"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobSimple"
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
    post:
      tags:
      - "jobs"
      security:
        - bearerAuth: [bearerAuth] 
      summary: "Create a job"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobEntity"  
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobEntity"
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
    put:
      tags:
      - "jobs"
      security:
        - bearerAuth: [bearerAuth] 
      summary: "Update a job"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobEntity"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobEntity"
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
  /jobs-status:
    put:
      tags:
      - "jobs"
      security:
        - bearerAuth: [bearerAuth]
      summary: "change jobs's status"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobsStatusModel"  
      responses:
        "200":
          description: "successful operation"
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
  /jobs-report:
    post:
      tags:
      - "jobs"
      summary: "Report a Job"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobReportModel"  
      responses:
        "200":
          description: "created"
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
  /login:
    post:
      tags:
      - "login"
      summary: "get token from Authentication"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthModel"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tokenization"
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
  /users/id/{id}:
    get:
      tags:
      - "users"
      summary: "get User by Id"
      security:
        - bearerAuth: [bearerAuth] 
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
  /users:
    get:
      tags:
      - "users"
      summary: "Access all Users"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserEntity"
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
    post:
      tags:
      - "users"
      summary: "register a user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEntity"
      responses:
        "201":
          description: "created"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserEntity"
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
    put:
      tags:
      - "users"
      summary: "update a user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEntity"
      responses:
        "200":
          description: "successful operation"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalError'
  /companies:
    get:
      tags:
      - "companies"
      security:
        - bearerAuth: [bearerAuth]
      summary: "get all companies"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompanyEntity"
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
    post:
      tags:
      - "companies"
      security:
        - bearerAuth: [bearerAuth] 
      summary: "Create a company"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyEntity"           
      responses:
        "201":
          description: "created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalError'
    put:
      tags:
      - "companies"
      security:
        - bearerAuth: [bearerAuth] 
      summary: "Update a company"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyEntity"
      responses:
        "200":
          description: "successful operation"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
  /companies-status:
    put:
      tags:
      - "companies"
      security:
        - bearerAuth: [bearerAuth]
      summary: "change companies's status"
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/CompaniesStatusModel"
      responses:
        "200":
          description: "successful operation"
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
  /companies-image:
    post:
      tags:
      - "companies"
      security:
        - bearerAuth: [bearerAuth]
      summary: "change companies's image"
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyImageModel"
      responses:
        "201":
          description: "created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalError'
  /companies-image/id/{companyId}:
    get:
      tags:
      - "companies"
      summary: "get company's image"
      parameters:
        - in: path
          required: true
          name: companyId
          schema:
            type: string
            description: The city of a job that contains the value. Ex. São Paulo
      responses:
        "200":
          description: "successful operation"
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Auth header (Authorization) Access Token"
  responses:
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEntity'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEntity'
    InternalError:
      description: Internal error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEntity'
    Unauthorized:
      description: Forbidden operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEntity'
  schemas:
    ErrorEntity:
      type: "object"
      properties:
        error:
          type: string
    FileReturn:
      type: "object"
      properties:
        image:
          type: string
    Tokenization:
      type: "object"
      properties:
        accessToken:
          type: string
    JobsStatusModel:
      type: "object"
      properties:
        id:
          type: string
        status:
          type: string
          enum:
          - "active"
          - "canceled"
          - "paused"
          - "closed"
    CompaniesStatusModel:
      type: "object"
      properties:
        id:
          type: string
        status:
          type: string
          enum:
          - "active"
          - "inactive"
    AuthModel:
      type: "object"
      properties:
        email:
          type: string
        password:
          type: string
    JobReportModel:
      type: "object"
      properties:
        jobId:
          type: string
        description:
          type: string
    CompanyImageModel:
      type: "object"
      properties:
        companyId:
          type: string
        image64:
          type: string
    UserEntity:
      type: "object"
      properties:
        id:
          type: string
        profileID:
          type: string
          enum:
            - "recrutador"
            - "admin"
        name:
          type: string
        phone:
          type: string
        email:
          type: string
        password:
          type: string
        status:
          type: string
    JobSimple:
      type: "object"
      properties:
        id:
          type: string
        companyId:
          type: string
        title:
          type: string
        companyName:
          type: string
        city:
          type: string
        modality:
          type: string
    JobEntity:
      type: "object"
      properties:
        id:
          type: string
        companyId:
          type: string
        title:
          type: string
        description:
          type: string
        companyDescription:
          type: string
        seniority:
          type: string
        regime:
          type: string
        salary:
          type: number
          format: double
        state:
          type: string
        modality:
          type: string
        city:
          type: string
        link:
          type: string
        whatsapp:
          type: string
        email:
          type: string
    CompanyEntity:
      type: "object"
      properties:
        id:
          type: string
        name:
          type: string
        location:
          type: string
        description:
          type: string
        status:
          type: string
